/*****************---设计模式---**************************/
设计原则：
	1."封装变化":找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起
	2."针对接口编程而不是针对实现编程"
	3."多用组合，少用继承"
/************--- ---****************/
要点：
1.知道OO基础，并不足以设计出良好的OO系统
2.良好的OO设计必须具备可复用，可扩充，可维护三特性。
3.模式可以让我们建造出有良好OO设计质量的系统
4.模式被认为是历经验证的OO设计经验
5.模式不是代码，是针对设计问题的通用解决方案。
6.模式不是被发明的是被发现的。
7.大多数的模式和原则，都着眼于软件变化的主题
8.大多数的模式和原则都允许系统局部改变独立于其他部分。
9.模式让开发人员之间有共享语言，能最大化沟通价值
/************---1.策略模式 ---****************/
定义了算法族，分别封装起来，让他们之间可以相互替换此模式让算法的变化独立于使用算法的客户

/************---2.观察者模式 ---****************/
1.观察者模式是jdk中使用最多的模式之一
2.定义了对象之间的一对多依赖，这样一来，当一个对象改变时，他的所有依赖者都会受到通知并自动更新
3."设计原则":为了交互对象 之间的松耦合设计而努力（松耦合：相互依赖降到最低）

要点：
1.观察者模式定义对象间的一对一关系
2.主题用一个共同的接口来更新观察者
3.观察者和可观察者之间用松耦合方式结合
4.有多个观察者时，不可以依赖特定的通知次序。
5.swing中大量使用了观察者模式

/************--- 3.单例模式---****************/
1.确保一个类只有一个实例，并提供一个全局的访问点
/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

/************--- ---****************/

